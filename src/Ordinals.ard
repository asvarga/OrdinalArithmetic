\import Arith.Nat
\import util
\import Logic
\import Order.LinearOrder
\import Paths
\import Prelude
\open Nat

{-------------------}

-- Positive Nats

\func Pos => \Sigma (p : Nat) (1 <= p)

\func psuc (n : Nat) : Pos => (suc n, suc<=suc zero<=_)

\func +1 => psuc 0

\func \infixl 6 p+ (x y : Pos) : Pos =>
  \let
    | sum =>  x.1 + y.1
  \in (sum, NatLE.<=-transitive 1 y.1 sum y.2 (<=_0_+-left {y.1} x.1))

{-------------------}

-- Not necessarily well-formed

\data Ord'
  | zero
  | ord Ord' Pos Ord' -- ord a n b := Ï‰^a * n + b
  \where {
    \data \infix 4 < Ord' Ord' \with
      | zero, ord _ _ _ => zero<_
      | ord a1 _ _, ord a2 _ _ => a1<a2 (a1 < a2)
      | ord a1 n1 _, ord a2 n2 _ => n1<n2 (a1 = a2) (suc n1.1 <= n2.1)
      | ord a1 n1 b1, ord a2 n2 b2 => b1<b2 (a1 = a2) (n1 = n2) (b1 < b2)

    \func size' (_ : Ord') : Nat \with
      | zero => 0
      | ord a n b => size' a + n.1 + size' b

    \use \coerce n2o' (_ : Nat) : Ord' \with
      | 0 => zero
      | suc n => ord zero (psuc n) zero

    \lemma _!<zero {x : Ord'} (p : x < zero) : Empty \elim x, p
  }

\open Ord'

{-------------------}

-- Ordinals in Cantor Normal Form

\record Ord
  | val : Ord'
  | nfval : nf val
  \where {
    \data nf Ord' \with
      | zero => nf0
      | ord a n zero => nf1 (nf a)
      | ord a n (ord b m c) => nf2 (nf a) (nf (ord b m c)) (b < a)

    \func size (x : Ord) : Nat => size' x.val

    \use \coerce n2o (n : Nat) : Ord \with
      | 0 => \new Ord 0 nf0
      | suc n => \new Ord (suc n) (nf1 nf0)

    \func one : Ord => 1

    \func w : Ord \cowith
      | val => ord 1 +1 0
      | nfval => nf1 one.nfval

    \func osuc (x : Ord) : Ord \cowith
      | val => osuc' x.val
      | nfval => nfosuc x.nfval
      \where {
        \func osuc' (_ : Ord') : Ord' \with
          | zero => 1
          | ord zero n b => n2o' $ suc n.1
          | ord a n b => ord a n $ osuc' b

        \func nfosuc {x : Ord'} (p : nf x) : nf $ osuc' x \elim x, p
          | zero, _ => nf1 nf0
          | ord zero _ zero, _ => nf1 nf0
          | ord zero _ (ord _ _ _), nf2 _ _ a<zero => absurd $ _!<zero a<zero
          | ord (ord _ _ _) _ zero, nf1 nfa => nf2 nfa (nf1 nf0) zero<_
          | ord (ord _ _ _) _ (ord zero _ _), nf2 nfa _ _ => nf2 nfa (nf1 nf0) zero<_
          | ord (ord _ _ _) _ (ord (ord _ _ _) _ _), nf2 nfa nfb ba<a => nf2 nfa (nfosuc nfb) ba<a
      }

    \func \infix 4 comp (_ _ : Ord') : Ordering \with
      | zero, zero => EQ
      | zero, _ => LT
      | _, zero => GT
      | ord a1 n1 b1, ord a2 n2 b2 => \case a1 comp a2 \with {
        | EQ => \case n1.1 compn n2.1 \with {
          | EQ => b1 comp b2
          | _T => _T
        }
        | _T => _T
      }

    \func \infixl 6 + (x y : Ord) : Ord \cowith
      | val => x.val +' y.val
      | nfval => nf+ x.nfval y.nfval
      \where {
        \func \infixl 6 +' (_ _ : Ord') : Ord' \with
          | zero, y => y
          | x, zero => x
          | ord a1 n1 b1, ord a2 n2 b2 => \case a1 comp a2 \with {
            | LT => ord a2 n2 b2
            | EQ => ord a1 (n1 p+ n2) (b1 +' b2)
            | GT => ord a1 n1 (b1 +' ord a2 n2 b2)
          }

        \func nf+ {x : Ord'} (nfx : nf x) {y : Ord'} (nfy : nf y) : nf $ x +' y \elim x, y {

          | zero, zero => nf0
          | zero, ord ya yn yb => nfy
          | ord xa xn xb, zero => nfx
          | ord xa xn xb, ord ya yn yb =>
            \let
              | S : Ordering -> Ord' => (\lam o => \case o \with {
                | GT => ord xa xn (xb +' ord ya yn yb)
                | LT => ord ya yn yb
                | EQ => ord xa (xn p+ yn) (xb +' yb)
              })
              | sum : Ord' => S $ xa comp ya
            \in \case xa comp ya \as ordering, idp : ordering = xa comp ya \with {
              | LT, r =>
                \let nfsum : nf $ ord ya yn yb => nfy
                \in transport nf (pmap S r) nfsum
              | EQ, r =>
                -- how do I get an (nf xa) without further pattern matching on (x, nfx)?
                -- nfx will be constructed by nf1 or nf2 if xb==0 or xb!=0 respectively
                \let nfsum : nf $ ord xa (xn p+ yn) (xb +' yb) => {?}
                \in transport nf (pmap S r) nfsum
              | GT, r =>
                \let nfsum : nf $ ord xa xn (xb +' ord ya yn yb) => {?}
                \in transport nf (pmap S r) nfsum
            }


          {- -- doing all cases at once is a mess

          | zero, nf0, zero, nf0 => nf0
          | zero, nf0, ord ya yn yb, nfy => nfy
          | ord xa xn xb, nfx, zero, nf0 => nfx

          | ord zero xn (ord xba xbn xbb), nf2 _ _ a<zero, y, nfy => absurd $ _!<zero a<zero
          | x, nfx, ord zero yn (ord yba ybn ybb), nf2 _ _ a<zero => absurd $ _!<zero a<zero

          | ord zero xn zero, nf1 nf0,
            ord zero yn zero, nf1 nf0 => nf1 nf0
          | ord zero xn zero, nf1 nf0,
            ord (ord yaa yan yab) yn zero, nf1 nfya => nf1 nfya
          | ord zero xn zero, nf1 nf0,
            ord (ord yaa yan yab) yn (ord yba ybn ybb), nf2 nfya nfyb yba<ya => nf2 nfya nfyb yba<ya

          | ord (ord xaa xan xab) xn zero, nf1 nfxa,
            ord zero yn zero, nf1 nf0 => nf2 nfxa (nf1 nf0) zero<_
          | ord (ord xaa xan xab) xn zero, nf1 nfxa,
            ord (ord yaa yan yab) yn zero, nf1 nfya => {?}
          | ord (ord xaa xan xab) xn zero, nf1 nfxa,
            ord (ord yaa yan yab) yn (ord yba ybn ybb), nf2 nfya nfyb yba<ya => {?}

          | ord (ord xaa xan xab) xn (ord xba xbn xbb), nf2 nfxa nfxb xba<xa,
            ord zero yn zero, nf1 nf0 => {?}
          | ord (ord xaa xan xab) xn (ord xba xbn xbb), nf2 nfxa nfxb xba<xa,
            ord (ord yaa yan yab) yn zero, nf1 nfya => {?}
          | ord (ord xaa xan xab) xn (ord xba xbn xbb), nf2 nfxa nfxb xba<xa,
            ord (ord yaa yan yab) yn (ord yba ybn ybb), nf2 nfya nfyb yba<ya => {?}-}

        }
      }
  }

\open Ord

{-------------------}

-- TODO: decide nf: see Set.ard
-- TODO: decide equality
-- TODO: specify ploop (partial loop) typeclass
-- TODO: +
-- TODO: implement monoid (prove associativity)
-- TODO: left subtraction (total)
-- TODO: right subtraction (partial; need failure object)
-- TODO: implement ploop
-- TODO: encapsulate well-formedness into Ord without Ord'







