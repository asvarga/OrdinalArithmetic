

\data Unit | unit

\data Ordering | LT | EQ | GT

{-------------------}

\func \infixr 0 $ {A B : \Type} (f : A -> B) (x : A) : B => f x

\func id {A : \Type} (a : A) : A => a

\func const {A B : \Type} (a : A) (b : B) => a

\func \infix 4 compn (x y : Nat) : Ordering \with {
  | 0, 0 => EQ
  | 0, suc n => LT
  | suc n, 0 => GT
  | suc n1, suc n2 => n1 compn n2
}

{-------------------}

\data List (A : \Type) | nil | cons A (List A)

\func emptyList => nil {Nat}

\func \infixl 6 ++ {A : \Type} (xs ys : List A) : List A \elim xs
  | nil => ys
  | cons x xs => cons x (xs ++ ys)