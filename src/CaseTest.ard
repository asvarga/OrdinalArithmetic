\import Logic
\import Paths
\import util
\open Nat

\data Comp | LT | EQ | GT

\func \infix 4 compn (x y : Nat) : Comp \with {
  | 0, 0 => EQ
  | 0, suc n => LT
  | suc n, 0 => GT
  | suc n1, suc n2 => n1 compn n2
}

\record NatPair
  | fst : Nat
  | snd : Nat

\data test (pair : NatPair)
  | t (pair.fst <= pair.snd)

\func f (pair : NatPair) : NatPair => \case pair.fst compn pair.snd \with {
  | LT => pair
  | EQ => pair
  | GT => \new NatPair pair.snd pair.fst
}

\func testfpair (pair : NatPair) : test (f pair) => \case pair.fst compn pair.snd \with {
  | LT =>
    \let
      | fpair=pair : f pair = pair => {?}
      | testpair : test pair => {?}
    \in transport test (inv fpair=pair) testpair
  | EQ => {?}
  | GT => {?}
} \where {
  \func LT-><= {x y : Nat} (p : x compn y = LT) : x <= y \with
    | {0}, _ => zero<=_
    | {suc n}, {0}, p => absurd (transport T p unit)
    | {suc n}, {suc n1}, p => suc<=suc (LT-><= p)

  \func T (c : Comp) : \Type \with
    | LT => Empty
    | EQ => Empty
    | GT => Unit
}